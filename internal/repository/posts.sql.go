// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: posts.sql

package repository

import (
	"context"
	"database/sql"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (title, content, author, slug, created_at, updated_at)
VALUES (?, ?, ?, ?, ?, ?)
RETURNING id, title, content, author, slug, created_at, updated_at
`

type CreatePostParams struct {
	Title     string
	Content   sql.NullString
	Author    sql.NullString
	Slug      sql.NullString
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.Title,
		arg.Content,
		arg.Author,
		arg.Slug,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Author,
		&i.Slug,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePostByID = `-- name: DeletePostByID :exec
DELETE FROM posts WHERE id = ?
`

func (q *Queries) DeletePostByID(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePostByID, id)
	return err
}

const deletePostBySlug = `-- name: DeletePostBySlug :exec
DELETE FROM posts WHERE slug = ?
`

func (q *Queries) DeletePostBySlug(ctx context.Context, slug sql.NullString) error {
	_, err := q.db.ExecContext(ctx, deletePostBySlug, slug)
	return err
}

const getPostByID = `-- name: GetPostByID :one
SELECT id, title, content, author, slug, created_at, updated_at FROM posts WHERE id = ?
`

func (q *Queries) GetPostByID(ctx context.Context, id int64) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPostByID, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Author,
		&i.Slug,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPostBySlug = `-- name: GetPostBySlug :one
SELECT id, title, content, author, slug, created_at, updated_at FROM posts WHERE slug = ?
`

func (q *Queries) GetPostBySlug(ctx context.Context, slug sql.NullString) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPostBySlug, slug)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Author,
		&i.Slug,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listPosts = `-- name: ListPosts :many
SELECT id, title, content, author, slug, created_at, updated_at FROM posts ORDER BY id ASC
`

func (q *Queries) ListPosts(ctx context.Context) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, listPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.Author,
			&i.Slug,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPostsWithPagination = `-- name: ListPostsWithPagination :many
SELECT id, title, content, author, slug, created_at, updated_at FROM posts 
ORDER BY created_at DESC 
LIMIT ? OFFSET ?
`

type ListPostsWithPaginationParams struct {
	Limit  int64
	Offset int64
}

func (q *Queries) ListPostsWithPagination(ctx context.Context, arg ListPostsWithPaginationParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, listPostsWithPagination, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.Author,
			&i.Slug,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePostByID = `-- name: UpdatePostByID :one
UPDATE posts 
SET title = ?, content = ?, author = ?, updated_at = ?
WHERE id = ?
RETURNING id, title, content, author, slug, created_at, updated_at
`

type UpdatePostByIDParams struct {
	Title     string
	Content   sql.NullString
	Author    sql.NullString
	UpdatedAt sql.NullTime
	ID        int64
}

func (q *Queries) UpdatePostByID(ctx context.Context, arg UpdatePostByIDParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, updatePostByID,
		arg.Title,
		arg.Content,
		arg.Author,
		arg.UpdatedAt,
		arg.ID,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Author,
		&i.Slug,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePostBySlug = `-- name: UpdatePostBySlug :one
UPDATE posts 
SET title = ?, content = ?, author = ?, updated_at = ?
WHERE slug = ?
RETURNING id, title, content, author, slug, created_at, updated_at
`

type UpdatePostBySlugParams struct {
	Title     string
	Content   sql.NullString
	Author    sql.NullString
	UpdatedAt sql.NullTime
	Slug      sql.NullString
}

func (q *Queries) UpdatePostBySlug(ctx context.Context, arg UpdatePostBySlugParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, updatePostBySlug,
		arg.Title,
		arg.Content,
		arg.Author,
		arg.UpdatedAt,
		arg.Slug,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Author,
		&i.Slug,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
